name: CI-CD

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read
  pull-requests: read
  deployments: write

env:
  AWS_REGION: us-east-2

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci && npm run build

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDCDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/hello-world

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Trivy scan (registry)
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy-staging:
    needs: build-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDCDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK synth & deploy
        run: |
          npm i -g aws-cdk@2
          cd infra
          npm ci
          cdk deploy Service-dev --require-approval never -c stage=dev

  promote-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.lb.outputs.url }}
    concurrency: prod
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDCDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Manual approval
        uses: chrnorm/deployment-action@v2.0.5
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy prod
        run: |
          npm i -g aws-cdk@2
          cd infra
          npm ci
          cdk deploy --all --require-approval never -c stage=prod

      - name: Get LB URL
        id: lb
        run: |
          URL=$(aws cloudformation describe-stacks \
            --stack-name Service-prod \
            --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" \
            --output text)
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Update deployment status
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment-url: ${{ steps.lb.outputs.url }}
          deployment-id: ${{ github.deployment_id }}
          state: 'success'

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment-url: ${{ steps.lb.outputs.url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'
